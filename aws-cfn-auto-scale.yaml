AWSTemplateFormatVersion: "2010-09-09"
Description: Auto Scaling Lab with Apache Web Server

# Parameters allow customization when launching the stack
Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC

Resources:
  # Create the VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: AutoScalingLabVPC

  # Internet Gateway for public internet access
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AutoScalingLabIGW

  # Attach Internet Gateway to VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Create two public subnets in different AZs
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Cidr [!Ref VpcCidr, 6, 8]]
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Cidr [!Ref VpcCidr, 6, 8]]
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  # Create two private subnets for application instances
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Cidr [!Ref VpcCidr, 6, 8]]
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [3, !Cidr [!Ref VpcCidr, 6, 8]]
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  # Elastic IPs for NAT Gateways (1 in each AZ)
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: NAT1-EIP

  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: NAT2-EIP

  # NAT Gateways to allow internet access for private instances
  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NATGateway1

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: NATGateway2

  # Public route table with route to Internet Gateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate public subnets with public route table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Private route tables with NAT gateway route
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable1

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable2

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # Security Group allowing HTTP access from anywhere
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: WebServerSecurityGroup

  # IAM Role and Instance Profile for EC2 SSM access
  SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref SSMRole

  # Launch template defines how EC2 instances are launched
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: WebServerLaunchTemplate
      LaunchTemplateData:
        ImageId: !Sub "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2:1}}"
        InstanceType: t3.micro
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        SecurityGroupIds:
          - !Ref SecurityGroup
        UserData:
          # User data sets up Apache and CGI scripts to serve metadata and start CPU stress test
          Fn::Base64: !Sub |
            #!/bin/bash
            set -x
            exec > >(tee /var/log/user-data.log) 2>&1

            # Update and install packages
            yum update -y
            yum install -y httpd stress

            # Create HTML page
            cat > /var/www/html/index.html << 'EOF'
            <!DOCTYPE html>
            <html>
            <head>
                <title>Auto Scaling Lab</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 40px; text-align: center; }
                    .info { background: #f4f4f4; padding: 20px; margin: 20px; border-radius: 5px; }
                    .stress-btn { 
                        background: #ff4757; 
                        color: white; 
                        padding: 15px 30px; 
                        border: none; 
                        border-radius: 5px; 
                        cursor: pointer; 
                        font-size: 16px; 
                        margin: 20px; 
                    }
                    .stress-btn:hover { background: #ff6b81; }
                </style>
                <script>
                    // Fetch instance metadata when page loads
                    document.addEventListener('DOMContentLoaded', function() {
                        fetch('/instance-info')
                            .then(response => response.json())
                            .then(data => {
                                document.getElementById('instanceInfo').innerHTML = 
                                    '<strong>IP Address:</strong> ' + data.ip + ' / <strong>Instance ID:</strong> ' + data.instance_id;
                            })
                            .catch(error => {
                                console.error('Error loading instance information:', error);
                                document.getElementById('instanceInfo').innerText = 'Error loading instance information';
                            });
                    });

                    function stressCPU() {
                        fetch('/stress-cpu', { method: 'POST' })
                            .then(response => response.text())
                            .then(data => alert('CPU stress test started! ' + data))
                            .catch(error => {
                                console.error('Error starting stress test:', error);
                                alert('Error: ' + error);
                            });
                    }
                </script>
            </head>
            <body>
                <h1>Auto Scaling Lab Demonstration</h1>
                <div class="info">
                    <h2 id="instanceInfo">Loading instance information...</h2>
                    <p>This instance is serving your request.</p>
                </div>
                <button class="stress-btn" onclick="stressCPU()">Stress CPU (5 minutes)</button>
            </body>
            </html>
            EOF

            # Create CGI bin directory if it doesn't exist
            mkdir -p /var/www/cgi-bin

            # Create instance info CGI script
            cat > /var/www/cgi-bin/instance-info << 'EOF'
            #!/bin/bash
            echo "Content-type: application/json"
            echo ""
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            PRIVATE_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
            echo "{\"instance_id\": \"$INSTANCE_ID\", \"ip\": \"$PRIVATE_IP\"}"
            EOF

            # Create stress test CGI script - INCREASED TO 300 SECONDS (5 MINUTES)
            cat > /var/www/cgi-bin/stress-cpu << 'EOF'
            #!/bin/bash
            echo "Content-type: text/plain"
            echo ""
            echo "Stressing CPU for 300 seconds (5 minutes)..."
            # Run stress in background for 300 seconds (5 minutes)
            # nohup stress --cpu 2 --timeout 300 > /dev/null 2>&1 &
            nohup bash -c 'yes > /dev/null &' >/dev/null 2>&1
            nohup bash -c 'yes > /dev/null &' >/dev/null 2>&1
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            echo "CPU stress test initiated on instance: $INSTANCE_ID for 300 seconds"
            EOF

            # Make scripts executable
            chmod +x /var/www/cgi-bin/instance-info
            chmod +x /var/www/cgi-bin/stress-cpu

            # Configure Apache for CGI
            cat > /etc/httpd/conf.d/cgi.conf << 'EOF'
            <Directory "/var/www/cgi-bin">
                Options +ExecCGI
                AddHandler cgi-script .cgi .sh .pl .py
                Require all granted
            </Directory>
            EOF

            # Create aliases for the CGI scripts
            cat >> /etc/httpd/conf.d/cgi.conf << 'EOF'
            ScriptAlias /instance-info /var/www/cgi-bin/instance-info
            ScriptAlias /stress-cpu /var/www/cgi-bin/stress-cpu
            EOF

            # Enable CGI module
            sed -i 's/#LoadModule cgid_module/LoadModule cgid_module/' /etc/httpd/conf.modules.d/00-base.conf

            # Set proper permissions
            chown -R apache:apache /var/www/cgi-bin
            chmod 755 /var/www/cgi-bin

            # Configure Apache to serve CGI scripts
            echo "LoadModule cgid_module modules/mod_cgid.so" > /etc/httpd/conf.modules.d/00-cgi.conf

            # Start and enable Apache
            systemctl restart httpd
            systemctl enable httpd

            echo "User data script completed successfully"

  # Public-facing Application Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: AutoScalingLabALB
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroup
      Type: application

  # Target group to direct traffic to instances on port 80
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: WebServerTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance

  # Listener forwards incoming traffic to the target group
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # Auto Scaling Group to manage EC2 instances
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: WebServerASG
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: "1"
      MaxSize: "4"
      DesiredCapacity: "1"
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: WebServerInstance
          PropagateAtLaunch: true
    DependsOn:
      - LaunchTemplate
      - TargetGroup

  # Scaling policy: scale out when average CPU exceeds 30%
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 30.0

# Outputs: export useful values
Outputs:
  LoadBalancerDNS:
    Description: Load Balancer DNS Name
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: LoadBalancerDNS
